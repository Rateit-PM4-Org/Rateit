import org.springframework.boot.gradle.tasks.run.BootRun
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id "com.gorylenko.gradle-git-properties" version "2.5.0"
	id 'jacoco'
	id "org.sonarqube" version "6.2.0.5505"
}

group = 'ch.zhaw.rateit'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

gitProperties {
	dotGitDirectory = file("./../.git")
}

springBoot{
	buildInfo()
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-actuator-autoconfigure'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Rate limiting
	implementation 'com.bucket4j:bucket4j-core:8.10.1'

	// Cacheing
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.github.ben-manes.caffeine:caffeine:3.2.0'

	// Auth
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// Mongock
	implementation "io.mongock:mongock:5.5.1"
	implementation "io.mongock:mongock-springboot:5.5.1"
	implementation "io.mongock:mongodb-springdata-v4-driver:5.5.1"

	// Mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation "org.testcontainers:testcontainers:1.21.0"
	testImplementation "org.testcontainers:junit-jupiter:1.21.0"
	testImplementation "org.testcontainers:mongodb:1.21.0"
	testImplementation 'org.mockito:mockito-junit-jupiter:5.17.0'

}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "failed", "skipped"
	}
	ignoreFailures = true
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = true
		csv.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}


sonar {
  properties {
    property "sonar.projectKey", "rateit-pm4-org_rateit_api"
	property "sonar.projectName", "Rateit API"
    property "sonar.organization", "rateit-pm4-org"
    property "sonar.host.url", "https://sonarcloud.io"
	property "sonar.gradle.scanAll", "true"
  }
}

